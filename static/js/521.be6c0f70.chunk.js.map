{"version":3,"file":"static/js/521.be6c0f70.chunk.js","mappings":"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","sources":["pages/MoviesDetails/MoviesDetails.styled.tsx","pages/MoviesDetails/MoviesDetails.tsx"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const BackLink = styled.div`\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n  padding: 8px 0;\r\n  color: black;\r\n  text-decoration: none;\r\n  font-weight: 500;\r\n  text-transform: uppercase;\r\n\r\n  :hover {\r\n    color: orangered;\r\n  }\r\n`;\r\n\r\nexport const Details = styled.div`\r\n  display: flex;\r\n  @media screen and (max-width: 768px) {\r\n    flex-wrap: wrap;\r\n  }\r\n  gap: 20px;\r\n  padding-bottom: 16px;\r\n  margin-bottom: 16px;\r\n  border-bottom: 1px solid black;\r\n`;\r\n\r\nexport const TextDetails = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const Add = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n`;\r\n\r\nexport const Genres = styled.div`\r\n  display: flex;\r\n  gap: 5px;\r\n`;","import React, { useEffect, useState } from 'react';\r\nimport { useParams, useLocation, Link, Outlet, useNavigate } from 'react-router-dom';\r\nimport { getMovieDetails } from '../../services/content-api';\r\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\r\n\r\nimport {\r\n  Details,\r\n  TextDetails,\r\n  Genres,\r\n  Add,\r\n  BackLink,\r\n} from './MoviesDetails.styled';\r\n\r\nimport {\r\n   Genre, MovieDetails\r\n} from \"../../models\";\r\n\r\nconst MoviesDetails: React.FC = () => {\r\n  const [title, setTitle] = useState<string>(\"\");\r\n  const [overview, setOverview] = useState<string>(\"\");\r\n  const [genres, setGenres] = useState<Genre[]>([]);\r\n  const [poster_path, setPoster_path] = useState<string | null>(null);\r\n  const [popularity, setPopularity] = useState<number | null>(null);\r\n  const [backLinkHref, setBackLinkHref] = useState<string>('/movies');\r\n    const { id } = useParams<{ id: string }>();\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    \r\n  useEffect(() => {\r\n    if (location.state && location.state.from) {\r\n      if (location.state.from.search.indexOf('query') >= 0) {\r\n        setBackLinkHref('/movies' + location.state.from.search);\r\n      }\r\n      if (location.state.from.pathname === '/') {\r\n        setBackLinkHref('/');\r\n      }\r\n    }\r\n  }, [location.state]);\r\n\r\n  useEffect(() => {\r\n      async function fetchData() {\r\n        if (!id) return;\r\n      Loading.circle('Loading...');\r\n        const movieDetails: MovieDetails =\r\n        await getMovieDetails(id);\r\n      setTitle(movieDetails.title);\r\n      setOverview(movieDetails.overview);\r\n      setGenres(movieDetails.genres);\r\n      setPoster_path(movieDetails.poster_path);\r\n      setPopularity(movieDetails.vote_average);\r\n      Loading.remove();\r\n    }\r\n\r\n    fetchData();\r\n  }, [id]);\r\n  return (\r\n    <>\r\n      <BackLink>\r\n        <Link to={backLinkHref}>Back to movies</Link>\r\n      </BackLink>\r\n      <Details>\r\n        <>\r\n          {' '}\r\n          {poster_path && (\r\n            <img\r\n              src={`https://image.tmdb.org/t/p/w300${poster_path}`}\r\n              alt={title}\r\n            />\r\n          )}\r\n        </>\r\n        <TextDetails>\r\n          <>\r\n            <h1>{title}</h1>\r\n          </>\r\n\r\n          {popularity && <>User Score: {Math.round(popularity * 10)}%</>}\r\n          {overview && (\r\n            <>\r\n              <h2>Overview</h2> <>{overview}</>\r\n            </>\r\n          )}\r\n\r\n          {genres && (\r\n            <>\r\n              <>\r\n                <h3>Genres</h3>\r\n              </>\r\n              <Genres>\r\n                {genres.map(genre => (\r\n                  <span key={genre.id}>{genre.name} </span>\r\n                ))}\r\n              </Genres>\r\n            </>\r\n          )}\r\n        </TextDetails>\r\n      </Details>\r\n      <Details>\r\n        <TextDetails>\r\n          <h3>Additional information</h3>\r\n          <Add>\r\n            <Link to={`/movies/${id}/cast`}>Cast</Link>\r\n            <Link to={`/movies/${id}/reviews`}>Reviews </Link>\r\n          </Add>\r\n        </TextDetails>\r\n      </Details>\r\n      <Outlet />\r\n    </>\r\n  );\r\n};\r\nexport default MoviesDetails;"],"names":["BackLink","styled","div","_templateObject","_taggedTemplateLiteral","Details","_templateObject2","TextDetails","_templateObject3","Add","_templateObject4","Genres","_templateObject5","MoviesDetails","title","setTitle","useState","overview","setOverview","genres","setGenres","poster_path","setPoster_path","popularity","setPopularity","backLinkHref","setBackLinkHref","id","useParams","location","useLocation","useNavigate","useEffect","state","from","search","indexOf","pathname","async","Loading","circle","movieDetails","getMovieDetails","vote_average","remove","fetchData","_jsxs","_Fragment","children","_jsx","Link","to","src","concat","alt","Math","round","map","genre","name","Outlet"],"sourceRoot":""}